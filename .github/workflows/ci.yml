name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8 mypy

      - name: Check formatting with Black
        run: black --check --diff .

      - name: Check import sorting with isort
        run: isort --check-only --diff .

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics

      - name: Type check with mypy
        run: mypy . --ignore-missing-imports --no-strict-optional
        continue-on-error: true

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run quick model test
        run: |
          python -c "
          import torch
          from model import create_lightweight_model
          model = create_lightweight_model(num_classes=3)
          x = torch.randn(1, 4, 64, 64, 64)
          model.eval()
          with torch.no_grad():
              output = model(x)
          assert output.shape == (1, 3, 64, 64, 64)
          print('✓ Model test passed')
          "

      - name: Run unit tests
        run: |
          if [ -d "tests" ]; then
            pytest tests/ -v --tb=short
          else
            echo "No tests directory found, skipping"
          fi
        continue-on-error: true

      - name: Generate coverage report
        run: |
          if [ -d "tests" ]; then
            pytest tests/ --cov=. --cov-report=xml
          fi
        continue-on-error: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
        continue-on-error: true

  build:
    name: Build and Validate
    runs-on: ubuntu-latest
    needs: [code-quality, test]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Validate configuration
        run: |
          python -c "
          from config import get_quick_test_config, get_production_config
          config = get_quick_test_config()
          print('✓ Configuration valid')
          "

      - name: Check model instantiation
        run: |
          python -c "
          from model import create_model, create_lightweight_model, create_production_model
          from config import get_quick_test_config

          config = get_quick_test_config()
          model = create_model(config)
          print(f'✓ Model created: {sum(p.numel() for p in model.parameters()):,} parameters')
          "

      - name: Validate loss functions
        run: |
          python -c "
          from losses import DiceLoss, FocalLoss, CombinedLoss, create_loss_function
          from config import get_quick_test_config

          config = get_quick_test_config()
          criterion = create_loss_function(config)
          print('✓ Loss functions valid')
          "

  documentation:
    name: Check Documentation
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Check README exists
        run: |
          if [ ! -f "README.md" ]; then
            echo "README.md not found"
            exit 1
          fi
          echo "✓ README.md exists"

      - name: Check documentation files
        run: |
          for file in LICENSE CONTRIBUTING.md ARCHITECTURE.md API_DOCUMENTATION.md; do
            if [ -f "$file" ]; then
              echo "✓ $file exists"
            else
              echo "⚠ $file missing"
            fi
          done

      - name: Validate Markdown
        uses: actionshub/markdownlint@main
        continue-on-error: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Run Bandit security check
        uses: PyCQA/bandit@master
        with:
          path: .
          level: medium
        continue-on-error: true

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
        continue-on-error: true
